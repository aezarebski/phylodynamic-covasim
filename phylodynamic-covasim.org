#+title: Phylodynamic Covasim

[[https://covasim.idmod.org/][Covasim]]

#+begin_src python :noweb no-export :tangle pdc.py
  <<imports>>
  
  <<configuration>>
#+end_src

* Intervention: Testing

We construct and object to represent daily testing of each symptomatic
individuals to represent sampling in the sense of birth-death-sampling models.
There are a lot more options that could be set for this but this seems like a
reasonable starting point.

#+begin_src python :tangle pdc.py
test_spec = cv.test_prob(
    symp_prob = CONFIG["daily_testing"]["prob"],
    start_day = CONFIG["daily_testing"]["start_date"],
    end_day = CONFIG["daily_testing"]["end_date"]
)
#+end_src

* Simulate

Make a simulation object and run that simulation.

#+begin_src python :tangle pdc.py
sim = cv.Sim(
    CONFIG["params"],
    interventions=test_spec,
    show=False
)
sim.run()
#+end_src

* TODO Reconstructed tree

To reconstruct the tree connecting the sampled individuals we need to pull out
some data.

** Extract the data

#+begin_src python :tangle pdc.py
all_people = sim.people.to_people()
transmission_tree = sim.make_transtree()
seed_uids = [
    e["target"]
    for e in transmission_tree.infection_log
    if e["layer"] == "seed_infection"
]
diagnosed_uids = [int(p.uid) for p in all_people if p.diagnosed]
#+end_src

** Tree assembly

To extract the reconstructed tree we do two passes over the full transmission
tree(s). The first moves from the leaves to the root to build up a list of all
of the individuals that are relevant to the reconstructed tree. The second goes
from root to leaves building up a representation of the reconstructed tree up to
the level of resolution permitted by covasim. The modelling assumptions of
covasim mean that the result of the previous step is not necessarily a binary
tree hence further post-processing is necessary.

#+begin_src python :tangle pdc.py
# Assemble the reconstructed tree
#+end_src

** TODO Visualise the tree

#+begin_src python :tangle pdc.py
# Generate a visualisation
#+end_src

* TODO Configuration

#+name: configuration
#+begin_src python
CONFIG = {
    "params": {
        "pop_size": 2e3,
        "pop_infected": 10,
        "start_day": '2020-04-01',
        "end_day": '2020-04-05'
    },
    "daily_testing": {
        "prob": 0.3,
        "start_date": '2020-04-02',
        "end_date": '2020-05-31'
    },
    "output_json": "demo.json"
}
#+end_src

* Requirements

There are some packages that we need.

#+name: imports
#+begin_src python
import json as json
import sciris as sc
import covasim as cv
import numpy as np
import networkx as nx
#+end_src

The code here should run in a virtual environment. The following are the package
versions which can be used in a =requirements.txt= file.

#+begin_src text :tangle requirements.txt
backcall==0.2.0
covasim==3.0.7
cycler==0.10.0
decorator==5.0.9
dill==0.3.4
et-xmlfile==1.1.0
gitdb==4.0.7
GitPython==3.1.18
ipython==7.25.0
ipython-genutils==0.2.0
jdcal==1.4.1
jedi==0.18.0
jellyfish==0.8.2
jsonpickle==2.0.0
kiwisolver==1.3.1
line-profiler==3.3.0
llvmlite==0.36.0
matplotlib==3.4.2
matplotlib-inline==0.1.2
memory-profiler==0.58.0
multiprocess==0.70.12.2
numba==0.53.1
numpy==1.21.0
openpyexcel==2.5.14
openpyxl==3.0.7
pandas==1.3.0
parso==0.8.2
patsy==0.5.1
pexpect==4.8.0
pickleshare==0.7.5
Pillow==8.3.1
pkg-resources==0.0.0
prompt-toolkit==3.0.19
psutil==5.8.0
ptyprocess==0.7.0
Pygments==2.9.0
pyparsing==2.4.7
python-dateutil==2.8.1
pytz==2021.1
scipy==1.7.0
sciris==1.2.1
six==1.16.0
smmap==4.0.0
statsmodels==0.12.2
traitlets==5.0.5
wcwidth==0.2.5
xlrd==1.2.0
XlsxWriter==1.4.4
#+end_src

To create the environment use the following

#+begin_src sh
python3 -m venv venv
source venv/bin/activate
pip install -U pip   # update pip
pip install -r requirements.txt
#+end_src

To get a copy of the exact version of =covasim= that we are using there are a
couple of variables to inspect.

#+begin_src python :tangle pdc.py
print(sim.version)
print(sim.git_info)
#+end_src

